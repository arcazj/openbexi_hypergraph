package com.openbexi.hypergraph.data_browser;

// This class has been generated by ChatGPT according the following specification:
/* read abstract java classe "data_configuration" which import org.json.simple,
 include javadoc,
 the private method "read" to read the following Jason,
  and all getter to get all properties of startup configuration: {
  "startup configuration": [
    {
      "-type": "json file",
      "-url": "/data/yyyy/mm/dd",
      "-connector": "secure_sse:8443|secure: 8445"
    }
        */

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileReader;
import java.io.IOException;

/**
 * A class that provides a framework for reading a data configuration file in JSON format and accessing its properties.
 */
public class data_configuration {
    private final JSONObject configuration;

    public data_configuration(JSONObject configuration) {
        this.configuration = configuration;
    }

    /**
     * Constructs a new DataConfiguration object by reading the JSON configuration file at the specified path.
     *
     * @param configFilePath the path to the JSON configuration file
     * @throws IOException    if there is an error reading the configuration file
     * @throws ParseException if there is an error parsing the configuration file
     */
    public data_configuration(String configFilePath) throws IOException, ParseException {
        JSONParser parser = new JSONParser();
        this.configuration = (JSONObject) parser.parse(new FileReader(configFilePath));
    }

    public static void main(String[] args) {
    }

    public String getType(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-type");
    }

    public String getDataPath(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return (String) configNode.get("-data_path");
    }

    public String getConnector(int index) {
        JSONObject configNode = (JSONObject) ((JSONArray) configuration.get("startup configuration")).get(index);
        return configNode.get("-connector").toString().replaceAll(" ", "");
    }

}